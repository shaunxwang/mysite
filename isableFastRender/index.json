[{"authors":["admin"],"categories":null,"content":"I’m a miner, interpreter and modeller of large data. A father of three lovely kids and a husband to a beautiful wife.\nI’m grateful that I have met many people in a professional career as a data wrangler. Andrew, Gina, Robert, Phil, Stephanie and many more who had pushed, nurtured and supported me along the way. A journey of five years seems long, but it’s felt like it’s just begun, there are so many things to learn in this vast and ever-expanding universe of data and computer science. The memory of exhilarating excitements are still vivid in front me when I discovered VBA in Excel and Access, and the endless possibilities of automation; relational database and SQL, then NoSQL!; open source and Linux; generalised linear model and its matrix algebra; realised 4 units maths was actually useful in deriving moments of a distribution, principle components, maximum likelihood estimators and proving law of large numbers; 80-20 rule was really referring to the area-under-the-curve of a Pareto distribution; observed normal distribution was too “normal” in practice that any population could be merely summaries by mean and (very) occasionally standard deviation, come on! But those frequentist buzz words are trivial compared to what Bayesian and iterative process have brought me – a whole wild world of non-parametric modelling: neural nets, KNN, k-means, SVM, random forest and I’m definitely not throwing buzz words at potential recruiters, frankly.\nThe latest discovery on this journey is Python. It has truly democratised my work with data. One simply can’t resist its open-sourced charm and welcoming communities but to embrace it with open arms. It’s extremely fulfilling when complex business problems are analysed very quickly and well presented/documented in a Jupyter notebook with data visualisations; it\u0026rsquo;s rewarding when my functions and modules are adopted by others in the team; and it\u0026rsquo;s satisfying when a better way of doing things is learnt with Python.\nThis universe of data science is too big to be journeyed alone, I welcome you to join me and walk it step by step, grow day by day.\n","date":1593648000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1593648000,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"//localhost:1313/author/shaun-wang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/shaun-wang/","section":"authors","summary":"I’m a miner, interpreter and modeller of large data. A father of three lovely kids and a husband to a beautiful wife.\nI’m grateful that I have met many people in a professional career as a data wrangler.","tags":null,"title":"Shaun Wang","type":"authors"},{"authors":["Shaun Wang"],"categories":["Guide","Tutorial"],"content":"How to connect to Snowflake and pull data by using Python This is a quick guide on how to use my Python module to streamline your data workflow with Snowflake and Pandas, making data extraction easier.\nThe module contains two functions. One allows you to pull data from Snowflake and stores them in a csv file or pandas.DataFrame. The second function allows you to pull data from Snowflake and stores them in a feather file.\nStep 1 - Install required packages pip install snowflake-connector-python[pandas] Then, verify the following Python script to check if it\u0026rsquo;s installed correctly:\nimport snowflake.connector # Gets the version ctx = snowflake.connector.connect( user=\u0026#39;\u0026lt;your_user_name\u0026gt;\u0026#39;, password=\u0026#39;\u0026lt;your_password\u0026gt;\u0026#39;, account=\u0026#39;\u0026lt;your_account_name\u0026gt;\u0026#39; ) cs = ctx.cursor() try: cs.execute(\u0026#34;SELECT current_version()\u0026#34;) one_row = cs.fetchone() print(one_row[0]) finally: cs.close() ctx.close() then save it as validate.py.\nIf you not sure about which account_name to use like how I was, you can get account_name from your Snowflake login URL.\nIf you login URL looks like the link below:\nhttps://\u0026lt;\u0026quot;company_name\u0026quot;\u0026gt;.\u0026lt;\u0026quot;region\u0026quot;\u0026gt;.snowflakecomputing.com/console/login#/ then\n\u0026lt;\u0026quot;company_name\u0026quot;\u0026gt;.\u0026lt;\u0026quot;region\u0026quot;\u0026gt; is your account_name.\nRun the Python script once you have entered user_name, password and account_name.\nSuccessful run of Python script above shoud look like this:\nuser@home:~$ python3 validate.py 4.22.3 It\u0026rsquo;s ok if your Snowflake version is different than mine.\nOne down one to go:\npip install snowflake-sqlalchemy Complete list of required packages can be find in the requirements.txt\nYou can also run:\npip install -r requirements.txt to save some time.\nStep 2 - Download the snowpy.py module   Download  Download snowpy.py\nor\n  Clone github repository\nor\n  Download github repository as a zip file\n  Save in folder\nSave the downoaded snowpy.py file in our working folder.\nor\nUse the downloaded repository as your working folder, it comes with a Pyhon virtual environment with all the required packages which are listed in requirement.txt.\n  If you chose to clone the repository or download it as a zip file, you should have file/folder tree looks like this:\nYour working folder | ├── login.txt ├── README.md ├── requirements.txt ├── snowpy │ ├── bin │ ├── include │ ├── lib │ ├── lib64 -\u0026gt; lib │ ├── pyvenv.cfg │ └── share ├── snowpy.py ├── SQLs │ └── my_sql.sql └── validate.py Step 3 - Create a folder for SQL queries and login.txt   SQLs folder\nCreate a folder called SQLs to store SQL queries\nYour working folder | ├── login.txt ├── README.md ├── requirements.txt ├── snowpy │ ├── bin │ ├── include │ ├── lib │ ├── lib64 -\u0026gt; lib │ ├── pyvenv.cfg │ └── share ├── snowpy.py ├── 'SQLs' \u0026lt;\u0026lt;----------------------------\u0026lt; │ └── my_sql.sql └── validate.py   login.txt Create a text file called login.txt which contains three lines of text:\nyour_user_name (Snowflake) your_user_password (Snowflake) your_account_name (Snowflake) change those lines to fit your login details of Snowfake\nYour working folder | ├── 'login.txt' \u0026lt;\u0026lt;----------------------------\u0026lt; ├── README.md ├── requirements.txt ├── snowpy │ ├── bin │ ├── include │ ├── lib │ ├── lib64 -\u0026gt; lib │ ├── pyvenv.cfg │ └── share ├── snowpy.py ├── SQLs │ └── my_sql.sql └── validate.py Then set file permissions of login.txt so that root or group can not access it, i.e. only you can access and modify it.\nIf you are using a linux machine like I am, you can type the following in terminal:\nchmod go-rwx------ login.txt or\nchmod 600 login.txt Click here for detailed explanation of file permissions in linux machines\nIt\u0026rsquo;s also a good idea to add login.txt to .gitignore file so that you don\u0026rsquo;t accidentially commit and push login.txt with your real password stored in it.\n  Step 4 - How to use snowpy in Jupyter notebook   Install Jupyter notebook\npip install notebook   Load Jupyter notebook\nType the following in terminal\njupyter notebook Messages below will then show up in terminal, it indicates that Jupyter local server is running:\n[I 22:40:44.894 NotebookApp] Serving notebooks from local directory: /home/user/working_folder [I 22:40:44.895 NotebookApp] The Jupyter Notebook is running at: [I 22:40:44.895 NotebookApp] http://localhost:8888/?token=0cf9066b55adf4f683097cef877f696b7ad0f11234567890 [I 22:40:44.895 NotebookApp] or http://127.0.0.1:8888/?token=0cf9066b55adf4f683097cef877f696b7ad0f11234567890 [I 22:40:44.895 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation). [C 22:40:45.016 NotebookApp] To access the notebook, open this file in a browser: file:///home/user/.local/share/jupyter/runtime/nbserver-88888-open.html Or copy and paste one of these URLs: http://localhost:8888/?token=0cf9066b55adf4f683097cef877f696b7ad0f11234567890 or http://127.0.0.1:8888/?token=0cf9066b55adf4f683097cef877f696b7ad0f11234567890 Your working folder | ├── login.txt ├── README.md ├── requirements.txt ├── snowpy │ ├── bin │ ├── include │ ├── lib │ ├── lib64 -\u0026gt; lib │ ├── pyvenv.cfg │ └── share ├── snowpy.py ├── SQLs │ └── my_sql.sql ├── 'test.ipynb' \u0026lt;\u0026lt;----------------------------\u0026lt; └── validate.py   Create a test jupyter notebook   (A)     (B)     (C)     (D)   See below for the test SQL query, my_sql.sql which is located in /SQLs/my_sql.sql:\nselect current_version() as CURRENT_VERSION, current_timestamp(2) as CURRENT_DATE_TIME, \u0026#39;Well Done!\u0026#39; as MESSAGE; Your working folder | ├── login.txt ├── README.md ├── requirements.txt ├── snowpy │ ├── bin │ ├── include │ ├── lib │ ├── lib64 -\u0026gt; lib │ ├── pyvenv.cfg │ └── share ├── snowpy.py ├── SQLs │ └── 'my_sql.sql' \u0026lt;\u0026lt;----------------------------\u0026lt; ├── test.ipynb └── validate.py If you intend to use the second function, run_SQL_to_feather to store your data on disk in feather format, you need to install an additional package:\npip install feather-format Feather uses the Apache Arrow columnar memory specification to represent binary data on disk. This makes read and write operations very fast.\n  ","date":1593648000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593648000,"objectID":"178c87d2431fc984f4a159f0c00b156a","permalink":"//localhost:1313/post/post_001_snowpy/","publishdate":"2020-07-02T00:00:00Z","relpermalink":"/post/post_001_snowpy/","section":"post","summary":"This is a quick guide on how to use my Python module to streamline your data workflow with Snowflake and Pandas, making data extraction easier.","tags":["Python","Snowflake"],"title":"How to connect to Snowflake and pull data by using Python","type":"post"}]